============
Coding style
============

Please follow these coding standards when writing code for junov.net.

.. _coding-style-pre-commit:

Pre-commit checks
=================

`pre-commit <https://pre-commit.com>`_ is a framework for managing pre-commit
hooks. These hooks help to identify simple issues before committing code for
review. By checking for these issues before code review it allows the reviewer
to focus on the change itself, and it can also help to reduce the number CI
runs.

To use the tool, first install ``pre-commit`` and then the git hooks::

.. console::

    $ pip install pre-commit
    $ pre-commit install

On the first commit ``pre-commit`` will install the hooks, these are
installed in their own environments and will take a short while to
install on the first run. Subsequent checks will be significantly faster.
If the an error is found an appropriate error message will be displayed.
If the error was with ``isort`` then the tool will go ahead and fix them for
you. Review the changes and re-stage for commit if you are happy with
them.

.. _coding-style-python:

Python style
============

* Unless otherwise specified, follow :pep:`8`.

  Use `flake8`_ to check for problems in this area. Remember that
  :pep:`8` is only a guide, so respect the style of the surrounding code as a
  primary goal.

  An exception to :pep:`8` is our rules on line lengths. Don't limit lines of
  code to 79 characters if it means the code looks significantly uglier or is
  harder to read. We allow up to 100 characters as this is between 79 and 120.
  This check is included when you run ``flake8``.

* Use four spaces for indentation.

* Use four space hanging indentation rather than vertical alignment::

    raise AttributeError(
        'Here is a multiline error message '
        'shortened for clarity.'
    )

  Instead of::

      raise AttributeError('Here is a multiline error message '
                           'shortened for clarity.')

  This makes better use of space and avoids having to realign strings if the
  length of the first line changes.

* Use single quotes for strings, or a double quote if the string contains a
  single quote. Don't waste time doing unrelated refactoring of existing code
  to conform to this style.

* Use underscores, not camelCase, for variable, function and method names
  (i.e. ``poll.get_unique_voters()``, not ``poll.getUniqueVoters()``).

* Use ``InitialCaps`` for class names (or for factory functions that
  return classes).

Imports
=======

* Use `isort <https://github.com/PyCQA/isort#readme>`_ to automate import
  sorting using the guidelines below.

  Quick start:

  .. console::

      $ python -m pip install isort >= 5.12.0
      $ isort -rc .

  This runs ``isort`` recursively from your current directory, modifying any
  files that don't conform to the guidelines. If you need to have imports out
  of order (to avoid a circular import, for example) use a comment like this::

      import module  # isort:skip

* Put imports in these groups: future, standard library, third-party libraries,
  other junov.net components, local junov.net component, try/excepts. Sort lines in
  each group alphabetically by the full module name. Place all ``import module``
  statements before ``from module import objects`` in each section. Use absolute
  imports for other junov.net components and relative imports for local components.

* On each line, alphabetize the items with the upper case items grouped before
  the lowercase items.

* Break long lines using parentheses and indent continuation lines by 4 spaces.
  Include a trailing comma after the last import and put the closing
  parenthesis on its own line.

  Use a single blank line between the last import and any module level code,
  and use two blank lines above the first function or class.

  For example (comments are for explanatory purposes only):

  .. code-block:: python

      # future
      from __future__ import unicode_literals

      # standard library
      import json
      from itertools import chain

      # third-party
      import bcrypt

      # junov.net
      from src.users.routers import users_router
      from src.schedule.routers import (
            schedule_router, schedule_router1, schedule_router2, schedule_router3,
            schedule_router4,
      )

      # local junov.net
      from .models import LogEntry

      # try/except
      try:
          import yaml
      except ImportError:
          yaml = None

      CONSTANT = 'foo'


      class Example:
          # ...

View style
==========

...

Model style
===========

...
